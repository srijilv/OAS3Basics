openapi: 3.0.0
info:
  title: Open API Basics
  description: Specification
  termsOfService: http://example.com/terms/
  contact:
    name: srijil
    url: http://facebook.com/srijilv
    email: srijilvijayan@gmail.com
  license:
    name: apache2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
- url: https://api.example.com/v1
  description: Production server (uses live data)
- url: https://sandbox-api.example.com:8443/v1
  description: Sandbox server (uses test data)
security:
- BasicAuth: []
paths:
  /v1/customers:
    get:
      tags:
      - Customer
      summary: List of customers
      description: To get all list of customers in the system
      operationId: getCustomerV1
      parameters:
      - name: pageNo
        in: query
        description: Page No
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageLimit
        in: query
        description: Page Limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: List  of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerList'
        "400":
          description: Bad Request
        "409":
          description: Conflict
    post:
      tags:
      - Customer
      summary: Create a Customer
      description: To create a new customer
      operationId: createCustomerV1
      requestBody:
        description: New Customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          description: Customer created
          headers:
            Location:
              description: Location of the created customer
              style: simple
              explode: false
              schema:
                type: string
                format: URI
                example: "http://example.com/v1/customers/{assignedIdValue}"
            Date:
              description: Date of the created customer
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /v1/customers/{customerId}:
    get:
      tags:
      - Customer
      summary: Customer by Customer ID
      description: Get Customer details by using **Customer** ID
      operationId: getCustomerByIdV1
      parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Customer Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Not Found
    put:
      tags:
      - Customer
      summary: Update customer
      description: API to update the customer data.
      operationId: updateCustomerV1
      parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Customer Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "203":
          description: Customer Updated
        "404":
          description: Not Found
    delete:
      tags:
      - Customer
      summary: Delete Customer
      description: API to delete customer data
      operationId: deleteCustomerV1
      parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Customer Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        "404":
          description: Not Found
  /v1/customers/{customerId}/orders:
    post:
      tags:
      - Orders
      summary: Customer Order
      description: Customer order details
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Order Details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerOrder'
      responses:
        "200":
          description: Customer order placed
      callbacks:
        orderStatusUpdate:
          '{request.body#/customerCallBackUrl}':
            description: Update the status of the order
            post:
              summary: Update order status
              description: Update the status of the order
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                "200":
                  description: Order updated.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/PostResponse'
  /v1/cities:
    get:
      tags:
      - City
      summary: All Cities
      description: API to Fetch All Cities
      operationId: getCitiesV1
      parameters:
      - name: pageNo
        in: query
        description: Page No
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageLimit
        in: query
        description: Page Limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: List of Cities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Citylistmin'
    post:
      tags:
      - City
      summary: Create City
      description: API to create new city
      operationId: createCityV1
      requestBody:
        description: POST DATA
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      responses:
        "201":
          description: City Created
          headers:
            Location:
              description: Location of created city
              style: simple
              explode: false
              schema:
                type: string
                format: URI
                example: http://example.com/v1/cities
            Date:
              description: Date time of city created
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /v1/cities/{cityId}:
    get:
      tags:
      - City
      summary: Get City
      description: Get City information based on City ID
      operationId: getCityByIdV1
      parameters:
      - name: cityId
        in: path
        description: City ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Found City
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
    put:
      tags:
      - City
      summary: Update City
      description: API to update the City data
      operationId: updateCityV1
      parameters:
      - name: cityId
        in: path
        description: City ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: City Info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        "203":
          description: City Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
    delete:
      tags:
      - City
      summary: Delete City
      description: API to delete City
      operationId: deleteCityV1
      parameters:
      - name: cityId
        in: path
        description: City ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: City Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
components:
  schemas:
    SpokenLanguages:
      type: object
      properties:
        primary:
          type: string
          example: Malayalam
        other:
          type: string
          example: Tamil
    Zipcode:
      maxLength: 6
      minLength: 5
      type: integer
      example: 673633
    Countryname:
      maxLength: 100
      minLength: 2
      type: string
      example: India
    Cityname:
      maxLength: 50
      minLength: 2
      type: string
      example: Calicut
    Citycode:
      maxLength: 3
      minLength: 2
      type: string
      example: CLT
      enum:
      - CLT
      - KCH
      - KNR
      - MLP
    Citymayor:
      maxLength: 50
      minLength: 5
      type: string
      example: Ravi
    City:
      type: object
      properties:
        id:
          format: uuid
        cityCode:
          $ref: '#/components/schemas/Citycode'
        cityName:
          $ref: '#/components/schemas/Cityname'
        countryName:
          $ref: '#/components/schemas/Countryname'
        zipCode:
          $ref: '#/components/schemas/Zipcode'
        spokenLanguages:
          $ref: '#/components/schemas/SpokenLanguages'
    Citylist:
      maxLength: 100
      minLength: 1
      type: array
      description: array to hold cities
      items:
        $ref: '#/components/schemas/City'
    Citylistmin:
      type: object
      properties:
        extras:
          $ref: '#/components/schemas/Citymayor'
      allOf:
      - $ref: '#/components/schemas/City'
    Customer:
      type: object
      properties:
        id:
          format: uuid
          readOnly: true
        customerId:
          type: integer
          format: int32
          example: 1222
        customerName:
          maxLength: 50
          minLength: 2
          type: string
        customerCurrency:
          maxLength: 3
          minLength: 3
          type: string
          example: USD
          enum:
          - USD
          - CRC
          - INR
        transactionCurrency:
          type: array
          example:
          - USD
          - CRC
          - INR
          items:
            type: string
            enum:
            - USD
            - CRC
            - INR
        customerROE:
          type: number
          format: float
          example: 2.23
      description: customer data
    CustomerList:
      maxLength: 100
      minLength: 1
      type: array
      description: array to hold customers
      items:
        $ref: '#/components/schemas/Customer'
    PostResponse:
      type: object
      properties:
        status:
          type: string
          example: Success
        id:
          format: uuid
    Order:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        orderName:
          type: string
        orderQuantiy:
          type: integer
          default: 1
        orderAmount:
          type: number
          format: float
      description: Order
    CustomerOrder:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        customerReference:
          type: string
        customerCallBackUrl:
          type: string
          format: uri
        Orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
  parameters:
    CustomerId:
      name: customerId
      in: path
      description: Customer ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    CityId:
      name: cityId
      in: path
      description: City ID.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    PageNo:
      name: pageNo
      in: query
      description: Page No
      required: true
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 1
    PageLimit:
      name: pageLimit
      in: query
      description: Page Limit
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 10
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
